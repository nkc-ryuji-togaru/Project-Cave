//================================================================================================================
// CsvSplit.cs
// 製作者：戸軽隆二
//================================================================================================================
/* 概要
		Csvのテキストデータを分割して取得するクラス
		以下の関数群が用意されている
		・インスタンス生成時にテキストファイルのパスを取得
		・GetCsv = テキストデータを１行ごとに分割して取得
		・Split = テキストデータを”,”ごとに分割して取得
*/
//================================================================================================================
/* バージョン
		戸軽隆二		1.0 クラス生成
*/
//================================================================================================================
using UnityEngine;
using System.Collections;

public class CsvSplit : MonoBehaviour {

	// テキストファイルの存在するパス
	string datePath;

	//======================================================================================================
	/// <summary>
	/// テキストファイルを取得し、行ごとに分割した配列データを返す
	/// </summary>
	/// <returns></returns>
	//======================================================================================================
	public string[] GetCsv() {
		// csvファイルの読み込み
		TextAsset csv = Resources.Load(datePath) as TextAsset;

		// テキストデータを１行ごとに分割
		string[] csvlist = csv.text.Split('\n');

		// 一番最後の行列データが空白だけの余分なデータなので削除する
		string[] list = new string[csvlist.Length - 2];
		for (int i = 0; i < list.Length; i++) {
			list[i] = csvlist[i + 1];
		}

		return list;
	}
	//======================================================================================================
	/// <summary>
	/// 文字列を , ごとに分割した配列データで返す。最後の改行コードだけの文字列を削除して返す。
	/// </summary>
	/// <param name="csvlist">分割したい文字列</param>
	/// <returns></returns>
	//======================================================================================================
	public string[] Split(string csvlist) {
		// テキストを , ごとに分割する
		string[] str = csvlist.Split(',');
		// 最後の改行コードだけの部分を削除する
		str[str.Length - 1] = str[str.Length - 1].Substring(0, str[str.Length - 1].Length - 1);

		return str;
	}
	//======================================================================================================
	/// <summary>
	/// 文字列表から特定の名前と一致する文字列データを取得する
	/// </summary>
	/// <param name="csvlist">行ごとに分割した文字列データ</param>
	/// <param name="name">取得したい列の名前データ</param>
	/// <returns></returns>
	//======================================================================================================
	public string[] SerchWithName(string[] csvlist, string name) {
		foreach (string csv in csvlist) {
			string[] data = Split(csv);
			// 名前と一致したら配列を返す
			if (data[1] == name) {
				return data;
			}
		}
		return null;
	}
	//======================================================================================================
	/// <summary>
	/// 文字列表から特定のIDと一致する文字列データを取得する
	/// </summary>
	/// <param name="csvlist">行ごとに分割した文字列データ</param>
	/// <param name="index">取得したい列のインデックス</param>
	/// <param name="id">取得したい列のIDデータ</param>
	/// <returns></returns>
	//======================================================================================================
	public string[] SerchWithID(string[] csvlist, int index, int id) {
		foreach (string csv in csvlist) {
			string[] data = Split(csv);
			// IDと一致したら配列を返す
			if (int.Parse(data[index]) == id) {
				return data;
			}
		}
		return null;
	}
	//======================================================================================================
	/// <summary>
	/// コンストラクタ
	/// </summary>
	/// <param name="path">テキストデータのパス</param>
	public CsvSplit(string path) {
		datePath = path;
	}
}
